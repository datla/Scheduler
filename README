How to execute:
install gradle
tar -xvf scheduler.tar;cd scheduler;gradle cleanIdea idea (or) gradle cleaneclipse eclipse;
Open project in IDEA/Eclipse and open SchedulerIntegrationTest, run junit tests	


Other design considerations:
Below options were considered while solving the problem.
1. Rather than maintaining separate queue for holding messages while resources are busy, we can consider using ThreadPoolExecutor with PriorityBlockingQueue by overriding comparator. For some use cases, it's not so easy to implement custom priority requirements, using comparator. Also, sorting happens on inserting an element rather while getting it from queue. So, to satisfy these requirements considered implementing custom queue
2. Acquring resource permit in Task execution handler before method, issue with this approach is thread interleaving can cause issues and in certain cases message consumer (queue polling thread) can submit more messages (than it can process) to executor service and this will have some undesired effect on the oder in which messages are processed. So, have to consider acquiring resource permit before submitting it to executor service (either by message client or queue consumer) and relesing permit happens in the Callable Task finally block
3. Uncompleted task, which is terminating messages that belong to a particular group and raising an error can be implemented by writing TerminationPolicy by implementing isTerminated(Message message) and registering it with MessageClient so that if a message is terminated it can throw an exception. It is some what similar to Cancellation policy  

